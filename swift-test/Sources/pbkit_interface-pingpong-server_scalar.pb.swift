// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pbkit/interface-pingpong-server/scalar.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Pbkit_Pingpong_Scalar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var double: Double {
    get {return _storage._double}
    set {_uniqueStorage()._double = newValue}
  }

  public var float: Float {
    get {return _storage._float}
    set {_uniqueStorage()._float = newValue}
  }

  public var int32: Int32 {
    get {return _storage._int32}
    set {_uniqueStorage()._int32 = newValue}
  }

  public var int64: Int64 {
    get {return _storage._int64}
    set {_uniqueStorage()._int64 = newValue}
  }

  public var uint32: UInt32 {
    get {return _storage._uint32}
    set {_uniqueStorage()._uint32 = newValue}
  }

  public var uint64: UInt64 {
    get {return _storage._uint64}
    set {_uniqueStorage()._uint64 = newValue}
  }

  public var sint32: Int32 {
    get {return _storage._sint32}
    set {_uniqueStorage()._sint32 = newValue}
  }

  public var sint64: Int64 {
    get {return _storage._sint64}
    set {_uniqueStorage()._sint64 = newValue}
  }

  public var fixed32: UInt32 {
    get {return _storage._fixed32}
    set {_uniqueStorage()._fixed32 = newValue}
  }

  public var fixed64: UInt64 {
    get {return _storage._fixed64}
    set {_uniqueStorage()._fixed64 = newValue}
  }

  public var sfixed32: Int32 {
    get {return _storage._sfixed32}
    set {_uniqueStorage()._sfixed32 = newValue}
  }

  public var sfixed64: Int64 {
    get {return _storage._sfixed64}
    set {_uniqueStorage()._sfixed64 = newValue}
  }

  public var bool: Bool {
    get {return _storage._bool}
    set {_uniqueStorage()._bool = newValue}
  }

  public var string: String {
    get {return _storage._string}
    set {_uniqueStorage()._string = newValue}
  }

  public var bytes: Data {
    get {return _storage._bytes}
    set {_uniqueStorage()._bytes = newValue}
  }

  public var rdouble: [Double] {
    get {return _storage._rdouble}
    set {_uniqueStorage()._rdouble = newValue}
  }

  public var rfloat: [Float] {
    get {return _storage._rfloat}
    set {_uniqueStorage()._rfloat = newValue}
  }

  public var rint32: [Int32] {
    get {return _storage._rint32}
    set {_uniqueStorage()._rint32 = newValue}
  }

  public var rint64: [Int64] {
    get {return _storage._rint64}
    set {_uniqueStorage()._rint64 = newValue}
  }

  public var ruint32: [UInt32] {
    get {return _storage._ruint32}
    set {_uniqueStorage()._ruint32 = newValue}
  }

  public var ruint64: [UInt64] {
    get {return _storage._ruint64}
    set {_uniqueStorage()._ruint64 = newValue}
  }

  public var rsint32: [Int32] {
    get {return _storage._rsint32}
    set {_uniqueStorage()._rsint32 = newValue}
  }

  public var rsint64: [Int64] {
    get {return _storage._rsint64}
    set {_uniqueStorage()._rsint64 = newValue}
  }

  public var rfixed32: [UInt32] {
    get {return _storage._rfixed32}
    set {_uniqueStorage()._rfixed32 = newValue}
  }

  public var rfixed64: [UInt64] {
    get {return _storage._rfixed64}
    set {_uniqueStorage()._rfixed64 = newValue}
  }

  public var rsfixed32: [Int32] {
    get {return _storage._rsfixed32}
    set {_uniqueStorage()._rsfixed32 = newValue}
  }

  public var rsfixed64: [Int64] {
    get {return _storage._rsfixed64}
    set {_uniqueStorage()._rsfixed64 = newValue}
  }

  public var rbool: [Bool] {
    get {return _storage._rbool}
    set {_uniqueStorage()._rbool = newValue}
  }

  public var rstring: [String] {
    get {return _storage._rstring}
    set {_uniqueStorage()._rstring = newValue}
  }

  public var rbytes: [Data] {
    get {return _storage._rbytes}
    set {_uniqueStorage()._rbytes = newValue}
  }

  public var mdouble: Dictionary<String,Double> {
    get {return _storage._mdouble}
    set {_uniqueStorage()._mdouble = newValue}
  }

  public var mfloat: Dictionary<String,Float> {
    get {return _storage._mfloat}
    set {_uniqueStorage()._mfloat = newValue}
  }

  public var mint32: Dictionary<String,Int32> {
    get {return _storage._mint32}
    set {_uniqueStorage()._mint32 = newValue}
  }

  public var mint64: Dictionary<String,Int64> {
    get {return _storage._mint64}
    set {_uniqueStorage()._mint64 = newValue}
  }

  public var muint32: Dictionary<String,UInt32> {
    get {return _storage._muint32}
    set {_uniqueStorage()._muint32 = newValue}
  }

  public var muint64: Dictionary<String,UInt64> {
    get {return _storage._muint64}
    set {_uniqueStorage()._muint64 = newValue}
  }

  public var msint32: Dictionary<String,Int32> {
    get {return _storage._msint32}
    set {_uniqueStorage()._msint32 = newValue}
  }

  public var msint64: Dictionary<String,Int64> {
    get {return _storage._msint64}
    set {_uniqueStorage()._msint64 = newValue}
  }

  public var mfixed32: Dictionary<String,UInt32> {
    get {return _storage._mfixed32}
    set {_uniqueStorage()._mfixed32 = newValue}
  }

  public var mfixed64: Dictionary<String,UInt64> {
    get {return _storage._mfixed64}
    set {_uniqueStorage()._mfixed64 = newValue}
  }

  public var msfixed32: Dictionary<String,Int32> {
    get {return _storage._msfixed32}
    set {_uniqueStorage()._msfixed32 = newValue}
  }

  public var msfixed64: Dictionary<String,Int64> {
    get {return _storage._msfixed64}
    set {_uniqueStorage()._msfixed64 = newValue}
  }

  public var mbool: Dictionary<String,Bool> {
    get {return _storage._mbool}
    set {_uniqueStorage()._mbool = newValue}
  }

  public var mstring: Dictionary<String,String> {
    get {return _storage._mstring}
    set {_uniqueStorage()._mstring = newValue}
  }

  public var mbytes: Dictionary<String,Data> {
    get {return _storage._mbytes}
    set {_uniqueStorage()._mbytes = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pbkit_Pingpong_Scalar: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pbkit.pingpong"

extension Pbkit_Pingpong_Scalar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Scalar"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
    2: .same(proto: "float"),
    3: .same(proto: "int32"),
    4: .same(proto: "int64"),
    5: .same(proto: "uint32"),
    6: .same(proto: "uint64"),
    7: .same(proto: "sint32"),
    8: .same(proto: "sint64"),
    9: .same(proto: "fixed32"),
    10: .same(proto: "fixed64"),
    11: .same(proto: "sfixed32"),
    12: .same(proto: "sfixed64"),
    13: .same(proto: "bool"),
    14: .same(proto: "string"),
    15: .same(proto: "bytes"),
    16: .same(proto: "rdouble"),
    17: .same(proto: "rfloat"),
    18: .same(proto: "rint32"),
    19: .same(proto: "rint64"),
    20: .same(proto: "ruint32"),
    21: .same(proto: "ruint64"),
    22: .same(proto: "rsint32"),
    23: .same(proto: "rsint64"),
    24: .same(proto: "rfixed32"),
    25: .same(proto: "rfixed64"),
    26: .same(proto: "rsfixed32"),
    27: .same(proto: "rsfixed64"),
    28: .same(proto: "rbool"),
    29: .same(proto: "rstring"),
    30: .same(proto: "rbytes"),
    31: .same(proto: "mdouble"),
    32: .same(proto: "mfloat"),
    33: .same(proto: "mint32"),
    34: .same(proto: "mint64"),
    35: .same(proto: "muint32"),
    36: .same(proto: "muint64"),
    37: .same(proto: "msint32"),
    38: .same(proto: "msint64"),
    39: .same(proto: "mfixed32"),
    40: .same(proto: "mfixed64"),
    41: .same(proto: "msfixed32"),
    42: .same(proto: "msfixed64"),
    43: .same(proto: "mbool"),
    44: .same(proto: "mstring"),
    45: .same(proto: "mbytes"),
  ]

  fileprivate class _StorageClass {
    var _double: Double = 0
    var _float: Float = 0
    var _int32: Int32 = 0
    var _int64: Int64 = 0
    var _uint32: UInt32 = 0
    var _uint64: UInt64 = 0
    var _sint32: Int32 = 0
    var _sint64: Int64 = 0
    var _fixed32: UInt32 = 0
    var _fixed64: UInt64 = 0
    var _sfixed32: Int32 = 0
    var _sfixed64: Int64 = 0
    var _bool: Bool = false
    var _string: String = String()
    var _bytes: Data = Data()
    var _rdouble: [Double] = []
    var _rfloat: [Float] = []
    var _rint32: [Int32] = []
    var _rint64: [Int64] = []
    var _ruint32: [UInt32] = []
    var _ruint64: [UInt64] = []
    var _rsint32: [Int32] = []
    var _rsint64: [Int64] = []
    var _rfixed32: [UInt32] = []
    var _rfixed64: [UInt64] = []
    var _rsfixed32: [Int32] = []
    var _rsfixed64: [Int64] = []
    var _rbool: [Bool] = []
    var _rstring: [String] = []
    var _rbytes: [Data] = []
    var _mdouble: Dictionary<String,Double> = [:]
    var _mfloat: Dictionary<String,Float> = [:]
    var _mint32: Dictionary<String,Int32> = [:]
    var _mint64: Dictionary<String,Int64> = [:]
    var _muint32: Dictionary<String,UInt32> = [:]
    var _muint64: Dictionary<String,UInt64> = [:]
    var _msint32: Dictionary<String,Int32> = [:]
    var _msint64: Dictionary<String,Int64> = [:]
    var _mfixed32: Dictionary<String,UInt32> = [:]
    var _mfixed64: Dictionary<String,UInt64> = [:]
    var _msfixed32: Dictionary<String,Int32> = [:]
    var _msfixed64: Dictionary<String,Int64> = [:]
    var _mbool: Dictionary<String,Bool> = [:]
    var _mstring: Dictionary<String,String> = [:]
    var _mbytes: Dictionary<String,Data> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _double = source._double
      _float = source._float
      _int32 = source._int32
      _int64 = source._int64
      _uint32 = source._uint32
      _uint64 = source._uint64
      _sint32 = source._sint32
      _sint64 = source._sint64
      _fixed32 = source._fixed32
      _fixed64 = source._fixed64
      _sfixed32 = source._sfixed32
      _sfixed64 = source._sfixed64
      _bool = source._bool
      _string = source._string
      _bytes = source._bytes
      _rdouble = source._rdouble
      _rfloat = source._rfloat
      _rint32 = source._rint32
      _rint64 = source._rint64
      _ruint32 = source._ruint32
      _ruint64 = source._ruint64
      _rsint32 = source._rsint32
      _rsint64 = source._rsint64
      _rfixed32 = source._rfixed32
      _rfixed64 = source._rfixed64
      _rsfixed32 = source._rsfixed32
      _rsfixed64 = source._rsfixed64
      _rbool = source._rbool
      _rstring = source._rstring
      _rbytes = source._rbytes
      _mdouble = source._mdouble
      _mfloat = source._mfloat
      _mint32 = source._mint32
      _mint64 = source._mint64
      _muint32 = source._muint32
      _muint64 = source._muint64
      _msint32 = source._msint32
      _msint64 = source._msint64
      _mfixed32 = source._mfixed32
      _mfixed64 = source._mfixed64
      _msfixed32 = source._msfixed32
      _msfixed64 = source._msfixed64
      _mbool = source._mbool
      _mstring = source._mstring
      _mbytes = source._mbytes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._double) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._float) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._int32) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._int64) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._uint32) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._uint64) }()
        case 7: try { try decoder.decodeSingularSInt32Field(value: &_storage._sint32) }()
        case 8: try { try decoder.decodeSingularSInt64Field(value: &_storage._sint64) }()
        case 9: try { try decoder.decodeSingularFixed32Field(value: &_storage._fixed32) }()
        case 10: try { try decoder.decodeSingularFixed64Field(value: &_storage._fixed64) }()
        case 11: try { try decoder.decodeSingularSFixed32Field(value: &_storage._sfixed32) }()
        case 12: try { try decoder.decodeSingularSFixed64Field(value: &_storage._sfixed64) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._bool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._string) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._bytes) }()
        case 16: try { try decoder.decodeRepeatedDoubleField(value: &_storage._rdouble) }()
        case 17: try { try decoder.decodeRepeatedFloatField(value: &_storage._rfloat) }()
        case 18: try { try decoder.decodeRepeatedInt32Field(value: &_storage._rint32) }()
        case 19: try { try decoder.decodeRepeatedInt64Field(value: &_storage._rint64) }()
        case 20: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._ruint32) }()
        case 21: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._ruint64) }()
        case 22: try { try decoder.decodeRepeatedSInt32Field(value: &_storage._rsint32) }()
        case 23: try { try decoder.decodeRepeatedSInt64Field(value: &_storage._rsint64) }()
        case 24: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._rfixed32) }()
        case 25: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._rfixed64) }()
        case 26: try { try decoder.decodeRepeatedSFixed32Field(value: &_storage._rsfixed32) }()
        case 27: try { try decoder.decodeRepeatedSFixed64Field(value: &_storage._rsfixed64) }()
        case 28: try { try decoder.decodeRepeatedBoolField(value: &_storage._rbool) }()
        case 29: try { try decoder.decodeRepeatedStringField(value: &_storage._rstring) }()
        case 30: try { try decoder.decodeRepeatedBytesField(value: &_storage._rbytes) }()
        case 31: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mdouble) }()
        case 32: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mfloat) }()
        case 33: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mint32) }()
        case 34: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mint64) }()
        case 35: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._muint32) }()
        case 36: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._muint64) }()
        case 37: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._msint32) }()
        case 38: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._msint64) }()
        case 39: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mfixed32) }()
        case 40: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mfixed64) }()
        case 41: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._msfixed32) }()
        case 42: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._msfixed64) }()
        case 43: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mbool) }()
        case 44: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._mstring) }()
        case 45: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mbytes) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._double != 0 {
        try visitor.visitSingularDoubleField(value: _storage._double, fieldNumber: 1)
      }
      if _storage._float != 0 {
        try visitor.visitSingularFloatField(value: _storage._float, fieldNumber: 2)
      }
      if _storage._int32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int32, fieldNumber: 3)
      }
      if _storage._int64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._int64, fieldNumber: 4)
      }
      if _storage._uint32 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._uint32, fieldNumber: 5)
      }
      if _storage._uint64 != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._uint64, fieldNumber: 6)
      }
      if _storage._sint32 != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._sint32, fieldNumber: 7)
      }
      if _storage._sint64 != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._sint64, fieldNumber: 8)
      }
      if _storage._fixed32 != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._fixed32, fieldNumber: 9)
      }
      if _storage._fixed64 != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._fixed64, fieldNumber: 10)
      }
      if _storage._sfixed32 != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._sfixed32, fieldNumber: 11)
      }
      if _storage._sfixed64 != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._sfixed64, fieldNumber: 12)
      }
      if _storage._bool != false {
        try visitor.visitSingularBoolField(value: _storage._bool, fieldNumber: 13)
      }
      if !_storage._string.isEmpty {
        try visitor.visitSingularStringField(value: _storage._string, fieldNumber: 14)
      }
      if !_storage._bytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._bytes, fieldNumber: 15)
      }
      if !_storage._rdouble.isEmpty {
        try visitor.visitPackedDoubleField(value: _storage._rdouble, fieldNumber: 16)
      }
      if !_storage._rfloat.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._rfloat, fieldNumber: 17)
      }
      if !_storage._rint32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._rint32, fieldNumber: 18)
      }
      if !_storage._rint64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._rint64, fieldNumber: 19)
      }
      if !_storage._ruint32.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._ruint32, fieldNumber: 20)
      }
      if !_storage._ruint64.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._ruint64, fieldNumber: 21)
      }
      if !_storage._rsint32.isEmpty {
        try visitor.visitPackedSInt32Field(value: _storage._rsint32, fieldNumber: 22)
      }
      if !_storage._rsint64.isEmpty {
        try visitor.visitPackedSInt64Field(value: _storage._rsint64, fieldNumber: 23)
      }
      if !_storage._rfixed32.isEmpty {
        try visitor.visitPackedFixed32Field(value: _storage._rfixed32, fieldNumber: 24)
      }
      if !_storage._rfixed64.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._rfixed64, fieldNumber: 25)
      }
      if !_storage._rsfixed32.isEmpty {
        try visitor.visitPackedSFixed32Field(value: _storage._rsfixed32, fieldNumber: 26)
      }
      if !_storage._rsfixed64.isEmpty {
        try visitor.visitPackedSFixed64Field(value: _storage._rsfixed64, fieldNumber: 27)
      }
      if !_storage._rbool.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._rbool, fieldNumber: 28)
      }
      if !_storage._rstring.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._rstring, fieldNumber: 29)
      }
      if !_storage._rbytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._rbytes, fieldNumber: 30)
      }
      if !_storage._mdouble.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mdouble, fieldNumber: 31)
      }
      if !_storage._mfloat.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mfloat, fieldNumber: 32)
      }
      if !_storage._mint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mint32, fieldNumber: 33)
      }
      if !_storage._mint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mint64, fieldNumber: 34)
      }
      if !_storage._muint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._muint32, fieldNumber: 35)
      }
      if !_storage._muint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._muint64, fieldNumber: 36)
      }
      if !_storage._msint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._msint32, fieldNumber: 37)
      }
      if !_storage._msint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._msint64, fieldNumber: 38)
      }
      if !_storage._mfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mfixed32, fieldNumber: 39)
      }
      if !_storage._mfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mfixed64, fieldNumber: 40)
      }
      if !_storage._msfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._msfixed32, fieldNumber: 41)
      }
      if !_storage._msfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._msfixed64, fieldNumber: 42)
      }
      if !_storage._mbool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: _storage._mbool, fieldNumber: 43)
      }
      if !_storage._mstring.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._mstring, fieldNumber: 44)
      }
      if !_storage._mbytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mbytes, fieldNumber: 45)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Pbkit_Pingpong_Scalar, rhs: Pbkit_Pingpong_Scalar) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._double != rhs_storage._double {return false}
        if _storage._float != rhs_storage._float {return false}
        if _storage._int32 != rhs_storage._int32 {return false}
        if _storage._int64 != rhs_storage._int64 {return false}
        if _storage._uint32 != rhs_storage._uint32 {return false}
        if _storage._uint64 != rhs_storage._uint64 {return false}
        if _storage._sint32 != rhs_storage._sint32 {return false}
        if _storage._sint64 != rhs_storage._sint64 {return false}
        if _storage._fixed32 != rhs_storage._fixed32 {return false}
        if _storage._fixed64 != rhs_storage._fixed64 {return false}
        if _storage._sfixed32 != rhs_storage._sfixed32 {return false}
        if _storage._sfixed64 != rhs_storage._sfixed64 {return false}
        if _storage._bool != rhs_storage._bool {return false}
        if _storage._string != rhs_storage._string {return false}
        if _storage._bytes != rhs_storage._bytes {return false}
        if _storage._rdouble != rhs_storage._rdouble {return false}
        if _storage._rfloat != rhs_storage._rfloat {return false}
        if _storage._rint32 != rhs_storage._rint32 {return false}
        if _storage._rint64 != rhs_storage._rint64 {return false}
        if _storage._ruint32 != rhs_storage._ruint32 {return false}
        if _storage._ruint64 != rhs_storage._ruint64 {return false}
        if _storage._rsint32 != rhs_storage._rsint32 {return false}
        if _storage._rsint64 != rhs_storage._rsint64 {return false}
        if _storage._rfixed32 != rhs_storage._rfixed32 {return false}
        if _storage._rfixed64 != rhs_storage._rfixed64 {return false}
        if _storage._rsfixed32 != rhs_storage._rsfixed32 {return false}
        if _storage._rsfixed64 != rhs_storage._rsfixed64 {return false}
        if _storage._rbool != rhs_storage._rbool {return false}
        if _storage._rstring != rhs_storage._rstring {return false}
        if _storage._rbytes != rhs_storage._rbytes {return false}
        if _storage._mdouble != rhs_storage._mdouble {return false}
        if _storage._mfloat != rhs_storage._mfloat {return false}
        if _storage._mint32 != rhs_storage._mint32 {return false}
        if _storage._mint64 != rhs_storage._mint64 {return false}
        if _storage._muint32 != rhs_storage._muint32 {return false}
        if _storage._muint64 != rhs_storage._muint64 {return false}
        if _storage._msint32 != rhs_storage._msint32 {return false}
        if _storage._msint64 != rhs_storage._msint64 {return false}
        if _storage._mfixed32 != rhs_storage._mfixed32 {return false}
        if _storage._mfixed64 != rhs_storage._mfixed64 {return false}
        if _storage._msfixed32 != rhs_storage._msfixed32 {return false}
        if _storage._msfixed64 != rhs_storage._msfixed64 {return false}
        if _storage._mbool != rhs_storage._mbool {return false}
        if _storage._mstring != rhs_storage._mstring {return false}
        if _storage._mbytes != rhs_storage._mbytes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
